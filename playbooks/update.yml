# Experimenting with simple update playbooks

- name: Update controller first
  hosts: ansiblehosts
  vars:
    run: false
    reboot: false
  tasks:
  
  - name: 'Register system using Red Hat Subscription Manager'
    community.general.redhat_subscription:
      state: present
      username: "{{ uid_username }}"
      password: "{{ uid_password }}"
      syspurpose:
        usage: "Production"
        role: "Red Hat Enterprise Server"
        service_level_agreement: "Self-Support"
    become: true

  #TODO: Verify the repos that I want (e.g. EPEL)
    
  - name: upgrade all packages
    ansible.builtin.dnf:
      name: "*"
      state: latest
      update_only: true
    become: true  
    register: dnf_taskout
    
  - name: check to see if we need a reboot
    command: needs-restarting -r
    become: true
    register: needrestart_result
    ignore_errors: yes

  - name: Reboot Server if Necessary
    command: shutdown -r now "Ansible Updates Triggered"
    become: true
    async: 30
    poll: 0
    when: needrestart_result.rc == 1

  - name: Pausing to allow server to shutdown and terminate our SSH connection
    pause: seconds=30
    when: needrestart_result.rc == 1

  - name: Wait for reboot to complete and SSH to become available
    local_action: wait_for host={{ inventory_hostname }} port=22
      state=started delay=30 timeout=600
    retries: 30

- name: Update all
  hosts: all
  vars:
    run: false
    reboot: false
  tasks:
  
  - name: 'Register system using Red Hat Subscription Manager'
    community.general.redhat_subscription:
      state: present
      username: "{{ uid_username) }}"
      password: "{{ uid_password }}"
      syspurpose:
        usage: "Production"
        role: "Red Hat Enterprise Server"
        service_level_agreement: "Self-Support"
    become: true

  #TODO: Verify the repos that I want (e.g. EPEL)
    
  - name: upgrade all packages
    ansible.builtin.dnf:
      name: "*"
      state: latest
      update_only: true
    become: true  
    register: dnf_taskout
    
  - name: check to see if we need a reboot
    command: needs-restarting -r
    become: true
    register: needrestart_result
    ignore_errors: yes

  - name: Reboot Server if Necessary
    command: shutdown -r now "Ansible Updates Triggered"
    become: true
    async: 30
    poll: 0
    when: needrestart_result.rc == 1

  - name: Pausing to allow server to shutdown and terminate our SSH connection
    pause: seconds=30
    when: needrestart_result.rc == 1

  - name: Wait for reboot to complete and SSH to become available
    local_action: wait_for host={{ inventory_hostname }} port=22
      state=started delay=30 timeout=600
    retries: 30    
    delay: 10
    when: needrestart_result.rc == 1
